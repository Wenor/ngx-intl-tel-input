import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { FloatLabelType } from '@angular/material/form-field';
import { CountryDropdownDisplayOptions } from './enums/country-dropdown-display-options.enum';
import { CountryISO } from './enums/country-iso.enum';
import { TooltipLabel } from './enums/tooltip-label.enum';
import { INgxIntlTelInputComponent } from './interfaces/ngx-intl-tel-input-component.interface';
import { Country } from './model/country.model';
import { IntlTelModel } from './model/intl-tel.model';
import { NgxDropdownService } from './services/ngx-dropdown.service';
import { NgxIntlTelFormService } from './services/ngx-intl-tel-form.service';
import { NgxIntlTelInputService } from './services/ngx-intl-tel-input.service';
import { NgxIntlTelModelAdapter } from './services/ngx-intl-tel-model-adapter';
import * as i0 from "@angular/core";
export declare class NgxIntlTelInputComponent implements OnInit, OnChanges, AfterViewInit, ControlValueAccessor, INgxIntlTelInputComponent {
    readonly ngxIntlTelInputService: NgxIntlTelInputService;
    readonly ngxIntlTelForm: NgxIntlTelFormService;
    readonly ngxDropdownService: NgxDropdownService;
    private readonly ngxIntlTelModelAdapter;
    private readonly viewContainerRef;
    private readonly changeDetector;
    private injector;
    onKeyPress($event: KeyboardEvent): void;
    dropdownTemplate: TemplateRef<HTMLDivElement>;
    connectedElement: ElementRef<HTMLDivElement>;
    value: string;
    small: boolean;
    preferredCountries: string[];
    enablePlaceholder: boolean;
    cssClass: string;
    onlyCountries: string[];
    id: string;
    enableAutoCountrySelect: boolean;
    maxLength: number | string;
    tooltipField: TooltipLabel;
    selectFirstCountry: boolean;
    selectedCountryISO: CountryISO;
    phoneValidation: boolean;
    floatLabel: FloatLabelType;
    inputLabel: string;
    separateDialCode: boolean;
    replaceDialCode: boolean;
    stroked: boolean;
    isFocused: boolean;
    applyCodeOnFocus: boolean;
    disableCountrySelect: boolean;
    set dropdownClass(panelClass: string | string[]);
    set dropdownParams(params: CountryDropdownDisplayOptions[]);
    errors: Record<string, string>;
    set clearable(icon: string);
    countryChange: EventEmitter<Country>;
    onBlur: EventEmitter<void>;
    onFocus: EventEmitter<boolean>;
    menuClosed: EventEmitter<boolean>;
    menuOpened: EventEmitter<boolean>;
    clear: EventEmitter<void>;
    get dropdownClass(): string | string[];
    get errorStateMatcher(): ErrorStateMatcher;
    get errorKey(): string;
    get hasError(): boolean;
    get invalid(): boolean;
    get dirtyAndTouched(): boolean;
    private readonly _dropdownPanelClass;
    selectedCountry: Country;
    searchBuffer: string;
    separateDialCodeClass: string;
    phoneNumber: string;
    preferredCountriesInDropDown: Array<Country>;
    phoneUtil: any;
    disabled: boolean;
    clearIcon: string;
    dropdownParamsData: CountryDropdownDisplayOptions[];
    onTouched: () => void;
    propagateChange: (model: IntlTelModel | null) => void;
    control: FormControl;
    constructor(ngxIntlTelInputService: NgxIntlTelInputService, ngxIntlTelForm: NgxIntlTelFormService, ngxDropdownService: NgxDropdownService, ngxIntlTelModelAdapter: NgxIntlTelModelAdapter<unknown>, viewContainerRef: ViewContainerRef, changeDetector: ChangeDetectorRef, injector: Injector);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(obj: any): void;
    private _init;
    setSelectedCountry(country: Country): void;
    getSelectedCountry(): void;
    onPhoneNumberChange(): void;
    onCountrySelect(country: Country, el?: HTMLInputElement): void;
    removeDialCode(phoneNumber: string): string;
    private _replaceDialCode;
    private checkSeparateDialCodeStyle;
    private _applyDialCode;
    onBlurEvent(): void;
    onFocusEvent(): void;
    isMenuOpen(): void;
    isMenuClose(): void;
    openDropdown(): void;
    onClearClick(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxIntlTelInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxIntlTelInputComponent, "ngx-intl-tel-input", never, { "value": { "alias": "value"; "required": false; }; "small": { "alias": "small"; "required": false; }; "preferredCountries": { "alias": "preferredCountries"; "required": false; }; "enablePlaceholder": { "alias": "enablePlaceholder"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "onlyCountries": { "alias": "onlyCountries"; "required": false; }; "id": { "alias": "id"; "required": false; }; "enableAutoCountrySelect": { "alias": "enableAutoCountrySelect"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "tooltipField": { "alias": "tooltipField"; "required": false; }; "selectFirstCountry": { "alias": "selectFirstCountry"; "required": false; }; "selectedCountryISO": { "alias": "selectedCountryISO"; "required": false; }; "phoneValidation": { "alias": "phoneValidation"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "inputLabel": { "alias": "inputLabel"; "required": false; }; "separateDialCode": { "alias": "separateDialCode"; "required": false; }; "replaceDialCode": { "alias": "replaceDialCode"; "required": false; }; "stroked": { "alias": "stroked"; "required": false; }; "isFocused": { "alias": "isFocused"; "required": false; }; "applyCodeOnFocus": { "alias": "applyCodeOnFocus"; "required": false; }; "disableCountrySelect": { "alias": "disableCountrySelect"; "required": false; }; "dropdownClass": { "alias": "dropdownClass"; "required": false; }; "dropdownParams": { "alias": "dropdownParams"; "required": false; }; "errors": { "alias": "errors"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; }, { "countryChange": "countryChange"; "onBlur": "onBlur"; "onFocus": "onFocus"; "menuClosed": "menuClosed"; "menuOpened": "menuOpened"; "clear": "clear"; }, never, ["mat-error"], false, never>;
}
